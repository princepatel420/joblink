const express = require('express');
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');

const app = express();
app.use(express.json());
app.use(cors());

const JWT_SECRET = 'your_jwt_secret_here'; // Change this to a strong secret in production

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/worker-employer', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// User schema and model
const userSchema = new mongoose.Schema({
  username: { type: String, unique: true },
  passwordHash: String,
  role: { type: String, enum: ['employer', 'worker'] },
});
const User = mongoose.model('User', userSchema);

// Job schema and model
const jobSchema = new mongoose.Schema({
  title: String,
  description: String,
  type: String,
  postedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  postedAt: { type: Date, default: Date.now },
});
const Job = mongoose.model('Job', jobSchema);

// Middleware to authenticate JWT token
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (!token) return res.status(401).json({ message: 'Token missing' });

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ message: 'Invalid token' });
    req.user = user;
    next();
  });
};

// Register endpoint
app.post('/api/register', async (req, res) => {
  const { username, password, role } = req.body;
  if (!username || !password || !role) {
    return res.status(400).json({ message: 'Username, password, and role are required' });
  }
  if (!['employer', 'worker'].includes(role)) {
    return res.status(400).json({ message: 'Role must be employer or worker' });
  }
  const existingUser = await User.findOne({ username });
  if (existingUser) {
    return res.status(400).json({ message: 'Username already taken' });
  }
  const passwordHash = await bcrypt.hash(password, 10);
  const user = new User({ username, passwordHash, role });
  await user.save();
  res.status(201).json({ message: 'User registered successfully' });
});

// Login endpoint
app.post('/api/login', async (req, res) => {
  const { username, password } = req.body;
  const user = await User.findOne({ username });
  if (!user) return res.status(400).json({ message: 'Invalid username or password' });

  const validPassword = await bcrypt.compare(password, user.passwordHash);
  if (!validPassword) return res.status(400).json({ message: 'Invalid username or password' });

  const token = jwt.sign({ id: user._id, username: user.username, role: user.role }, JWT_SECRET, { expiresIn: '1h' });
  res.json({ token });
});

// Post a job (employer only)
app.post('/api/jobs', authenticateToken, async (req, res) => {
  if (req.user.role !== 'employer') {
    return res.status(403).json({ message: 'Only employers can post jobs' });
  }
  const { title, description, type } = req.body;
  if (!title || !description || !type) {
    return res.status(400).json({ message: 'Title, description, and type are required' });
  }
  const job = new Job({ title, description, type, postedBy: req.user.id });
  await job.save();
  res.status(201).json({ message: 'Job posted successfully' });
});

// Get all jobs (any user)
app.get('/api/jobs', async (req, res) => {
  const jobs = await Job.find().populate('postedBy', 'username role').sort({ postedAt: -1 });
  res.json(jobs);
});

// Start server
const PORT = 5000;
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});

